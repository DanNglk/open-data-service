buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.0.3'
    }
}

allprojects {
    group = 'org.jvalue.ods'
    version = '0.1.3'
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'

    sourceCompatibility = 1.8
    

    // setup generated sources (if any)
    ext {
        mainSourcesDir = 'src/main/java'
        generatedSourcesDir = 'target/generated-sources/java'
    }
    sourceSets {
        main {
            java {
                srcDir mainSourcesDir
                srcDir generatedSourcesDir
            }
        }
    }

    // default maven repo
    repositories {
        mavenLocal()
        jcenter()
    }

    // gradle wrapper
    task wrapper(type: Wrapper) {
        gradleVersion = '2.4'
    }

    // show java compiler warnings
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }

    // one jar with all sources & dependencies
    task uberjar(type: Jar) {
        from files(sourceSets.main.output.classesDir)
        from files(sourceSets.main.output.resourcesDir)
        from {configurations.compile.collect {zipTree(it)}}
        baseName = 'ods-' + project.name + '-SNAPSHOT'
    }

    // integration test
    def testSrcDir = file('src/integrationtest/java')
    def testResourceDir = file('src/integrationtest/resources')
    sourceSets {
        integrationTest {
            java.srcDir testSrcDir
            resources.srcDir testResourceDir
            compileClasspath = sourceSets.main.output + configurations.testCompile + sourceSets.test.output
            runtimeClasspath = output + compileClasspath
        }
    }
    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }
    // check.dependsOn integrationTest

    // let intellij know about 'special' folders
    idea {
        module {
            testSourceDirs += testSrcDir
            sourceDirs += file(generatedSourcesDir)
        }
    }

    // publishing to jcenter
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    bintray {
        user = project.hasProperty("bintray_user") ? bintray_user : "dummy user"
        key = project.hasProperty("bintray_key") ? bintray_key : "dummy key"
        publications = ['mavenJava']
        dryRun = false
        publish = true
        pkg {
            repo = 'maven'
            name = 'ods'
            desc = 'Open Data Service'
            websiteUrl = 'https://github.com/jvalue/open-data-service'
            issueTrackerUrl = 'https://github.com/jvalue/open-data-service/issues'
            vcsUrl = 'https://github.com/jvalue/open-data-service.git'
            licenses = ['AGPL-3.0']
            publicDownloadNumbers = true
            version {
                name = project.version
                gpg {
                    sign = true
                    passphrase = project.hasProperty("bintray_gpg_passphrase") ? bintray_gpg_passphrase : "dummy passphrase"
                }
                mavenCentralSync {
                    sync = false
                    user = 'userToken'
                    password = 'password'
                    close = '1'
                }
            }
        }
    }

	// snapshots
    artifactory {
        contextUrl = 'http://oss.jfrog.org/artifactory'
        publish {
            repository {
                repoKey = 'oss-snapshot-local'
                username = project.hasProperty("artifactory_user") ? artifactory_user : "dummy user"
                password = project.hasProperty("artifactory_password") ? artifactory_password : "dummy key"
                maven = true
            }
            defaults {
                publications ('mavenJava')
            }
        }
        resolve {
            repository {
                repoKey = 'libs-snapshot'
                maven = true
            }
        }
    }
}
